idRef {
  id: "55f07f01643431a11997689b"
}
ui_name: "cc_a5_chase_s2-Ava"
nodes {
  idRef {
    id: "55f07f06643431a1199768a3"
  }
  index: 0
  text: "Wh\342\200\246 what are you doing in my house?"
  branches {
    responseText: "I\342\200\231m here for justice."
    nextNodeIndex: 1
    idRef {
      id: "55f07f01643431a11997689b:55f07f13643431a1199768a9"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "I\342\200\231m here for answers."
    nextNodeIndex: 1
    idRef {
      id: "55f07f01643431a11997689b:55f07f14643431a1199768ab"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "I like this place. With the right drapes, it would be perfect for me."
    nextNodeIndex: 1
    idRef {
      id: "55f07f01643431a11997689b:55f07f14643431a1199768ad"
    }
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "5611c552346435ec1a006a47"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "55f07f27643431a1199768b0"
  }
  index: 1
  text: "Wait, I know you\342\200\246 the thorn in my paw. You\342\200\231ve been bumbling around Shiawase property for weeks, causing me all sorts of headaches.\n\nDon\342\200\231t bother denying it, I\342\200\231ve seen your face on the security footage."
  branches {
    responseText: ""
    nextNodeIndex: 2
    idRef {
      id: "55f07f01643431a11997689b:55f07f34643431a1199768b7"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f07f34643431a1199768b9"
  }
  index: 2
  text: "And I\342\200\231ve just heard that it was you - you! - who was behind the Shiawase Express robbery.\n\n{{GM}}She shakes her head in astonishment.{{/GM}}\n\nThat\342\200\231s going to cause a huge shakeup in the top ranks of corporate security. The thought that a rogue operation could intercept our shipments\342\200\246 truly astonishing."
  branches {
    responseText: ""
    nextNodeIndex: 3
    idRef {
      id: "55f07f01643431a11997689b:55f07f34643431a1199768bb"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f07f38643431a1199768bf"
  }
  index: 3
  text: "Ordinarily, I would be delighted at the prospect of weakened rivals. But you\342\200\231ve also been interfering with Project Hemlock and my portfolio. "
  branches {
    responseText: ""
    nextNodeIndex: 4
    idRef {
      id: "55f07f01643431a11997689b:55f07f38643431a1199768c1"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f07f39643431a1199768c3"
  }
  index: 4
  text: "Why is that? What\342\200\231s your angle here?"
  branches {
    responseText: "I just needed to raise cash. Shiawase is rich. Simple enough."
    nextNodeIndex: 5
    idRef {
      id: "55f07f01643431a11997689b:55f07f39643431a1199768c5"
    }
  }
  branches {
    responseText: "It started off as a simple heist, but now I feel compelled to stop whatever you\342\200\231re doing."
    nextNodeIndex: 6
    idRef {
      id: "55f07f01643431a11997689b:55f07f75643431a1199768cc"
    }
  }
  branches {
    responseText: "I want to steal your money, and shut you down. In either order."
    nextNodeIndex: 7
    idRef {
      id: "55f07f01643431a11997689b:55f07f77643431a1199768d5"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f71643431a1199768c8"
  }
  index: 5
  text: "So you had no idea what you were stumbling into? Unbelievable. At least that will assuage my colleagues\342\200\231 fears. They\342\200\231re convinced that only an Ares team would have the motive and opportunity to pull off what you\342\200\231ve done."
  branches {
    responseText: ""
    nextNodeIndex: 8
    idRef {
      id: "55f07f01643431a11997689b:55f07f73643431a1199768ca"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f07f75643431a1199768ce"
  }
  index: 6
  text: "Oh, so you\342\200\231re a convenient idealist, then? How\342\200\246 touching. I thought your kind died out back in the 1970s."
  branches {
    responseText: ""
    nextNodeIndex: 8
    idRef {
      id: "55f07f01643431a11997689b:55f07f75643431a1199768d0"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f07f77643431a1199768d7"
  }
  index: 7
  text: "So you\342\200\231re nothing but a thug. Fair enough. Fortunately I have a lot of experience in dealing with thugs."
  branches {
    responseText: ""
    nextNodeIndex: 8
    idRef {
      id: "55f07f01643431a11997689b:55f07f77643431a1199768d9"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f79643431a1199768dc"
  }
  index: 8
  text: "You see her eyeing a nearby panel. It\342\200\231s probably an alarm system of some sort."
  branches {
    responseText: "Rafik, restrain her."
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isRafik"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "554f9585346435e81c00369a"
            }
          }
        }
      }
    }
    nextNodeIndex: 9
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "55f07f01643431a11997689b:55f08033643431a11997691d"
    }
  }
  branches {
    responseText: "Sable, make sure that doesn\342\200\231t go off."
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isSable"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "554f9585346435e81c00369a"
            }
          }
        }
      }
    }
    nextNodeIndex: 10
    hideIfUnavailable: true
    idRef {
      id: "55f07f01643431a11997689b:55f0803d643431a119976924"
    }
  }
  branches {
    responseText: "Persi, check the alarm system."
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isPersi"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "554f9585346435e81c00369a"
            }
          }
        }
      }
    }
    nextNodeIndex: 11
    hideIfUnavailable: true
    idRef {
      id: "55f07f01643431a11997689b:55f0803f643431a11997692d"
    }
  }
  branches {
    responseText: "Dorbi, why don\342\200\231t you show the nice woman what happens when hostages try to call for help?"
    conditions {
      ops {
        functionName: "Evaluate If Actor is Inside Region"
        args {
          call_value {
            functionName: "All Actors With Tag"
            args {
              call_value {
                functionName: "Get Map Item (SenseTagList)"
                args {
                  string_value: "isDorbi"
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "AreOrAreNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Region)"
            args {
              string_value: "554f9585346435e81c00369a"
            }
          }
        }
      }
    }
    nextNodeIndex: 12
    hideIfUnavailable: true
    idRef {
      id: "55f07f01643431a11997689b:55f0803f643431a119976933"
    }
  }
  branches {
    responseText: "Stay right there, or I will end you."
    nextNodeIndex: 13
    hideIfUnavailable: true
    idRef {
      id: "55f07f01643431a11997689b:55f08042643431a119976939"
    }
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "55f08036643431a119976920"
  }
  index: 9
  text: "Of course.\n\n{{GM}}He firmly pins Ava\342\200\231s arms behind her back.{{/GM}}\n\nBehave. I\342\200\231m not inclined to show you much mercy. I\342\200\231d recommend you stay on $(l.name)\342\200\231s good side. $+(he) gets stabby when angry."
  branches {
    responseText: ""
    nextNodeIndex: 13
    idRef {
      id: "55f07f01643431a11997689b:55f08038643431a119976922"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isRafik"
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f0803d643431a119976926"
  }
  index: 10
  text: "\342\200\230Tis but a trifle!\n\n{{GM}}Without even jacking in, Sable realigns some cabling and disables the alarm panel.{{/GM}}\n\nI hope you\342\200\231re ready to talk, woman. $(l.name) has ways of getting answers."
  branches {
    responseText: ""
    nextNodeIndex: 13
    idRef {
      id: "55f07f01643431a11997689b:55f0803d643431a119976928"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isSable"
  actions {
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "HongKong:decker"
          }
          args {
            string_value: "DeckingJackIn"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isSable"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_jackin_decking"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f0803f643431a11997692f"
  }
  index: 11
  text: "What, that steaming pile of crap? I\342\200\231ll do you one better.\n\n{{GM}}Persi jacks into the manor\342\200\231s security system, bringing the surveillance and weapons systems under her command.{{/GM}}\n\nHey, lady: unless you want that armoire to suddenly start firing high-caliber bullets at your skull, I recommend you listen real closely to $(l.name) and answer their questions."
  branches {
    responseText: ""
    nextNodeIndex: 13
    idRef {
      id: "55f07f01643431a11997689b:55f0803f643431a119976931"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isPersi"
  actions {
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPersi"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_jackin_rigging"
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "HongKong:rigger"
          }
          args {
            string_value: "RigJackIn"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f0803f643431a119976935"
  }
  index: 12
  text: "{{GM}}Grinning, Dorbi incinerates the alarm panel. Then the carpet. Then the designer label on Ava\342\200\231s outfit.{{/GM}}\n\nI got plenty more where that came from. Unless you want to be burned to a crisp, I *highly recommend* you play nice and answer $(l.name)\342\200\231s questions."
  branches {
    responseText: ""
    nextNodeIndex: 13
    idRef {
      id: "55f07f01643431a11997689b:55f0803f643431a119976937"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  sourceWithTagInScene: "isDorbi"
  actions {
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "HongKong:spellcasting"
          }
          args {
            string_value: "FireboltExplosion"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isDorbi"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "HongKong:General/standing_cast"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f08042643431a11997693b"
  }
  index: 13
  text: "All right. What do you need to know?"
  branches {
    responseText: ""
    nextNodeIndex: 14
    idRef {
      id: "55f07f01643431a11997689b:55f08042643431a11997693d"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f080f9643431a1199769a7"
  }
  index: 14
  text: ""
  branches {
    responseText: "What, exactly, does Project Hemlock do?"
    actions {
      ops {
        functionName: "Add To Variable (int)"
        args {
          call_value {
            functionName: "Get Variable (int)"
            args {
              string_value: "questionsAsked"
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    nextNodeIndex: 15
    onlyOnce: true
    idRef {
      id: "55f07f01643431a11997689b:55f08101643431a1199769a9"
    }
  }
  branches {
    responseText: "Why was Shiawase shipping it to Walnut Creek?"
    actions {
      ops {
        functionName: "Add To Variable (int)"
        args {
          call_value {
            functionName: "Get Variable (int)"
            args {
              string_value: "questionsAsked"
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    nextNodeIndex: 26
    onlyOnce: true
    idRef {
      id: "55f07f01643431a11997689b:55f082d3643431a119976ad3"
    }
  }
  branches {
    responseText: "Who was going to buy the product?"
    actions {
      ops {
        functionName: "Add To Variable (int)"
        args {
          call_value {
            functionName: "Get Variable (int)"
            args {
              string_value: "questionsAsked"
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    nextNodeIndex: 32
    onlyOnce: true
    idRef {
      id: "55f07f01643431a11997689b:55f08200643431a119976a28"
    }
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Variable (int)"
            args {
              string_value: "questionsAsked"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 3
        }
      }
    }
    nextNodeIndex: 41
    hideIfUnavailable: true
    idRef {
      id: "55f07f01643431a11997689b:55f0839a643431a119976cec"
    }
    comment: "Only available after previous 3 are asked."
  }
  nodeType: ConversationNodeType_Simple
  comment: "Empty root interrogation node"
}
nodes {
  idRef {
    id: "55f08104643431a1199769ac"
  }
  index: 15
  text: "Hemlock is\342\200\246 beautiful. An engineering marvel."
  branches {
    responseText: ""
    nextNodeIndex: 16
    idRef {
      id: "55f07f01643431a11997689b:55f08112643431a1199769ae"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f08117643431a1199769b0"
  }
  index: 16
  text: "I doubt you have heard of Dr. Vauclair. He was a German pilot and industrialist, and a brilliant scientist in his own right. He went into seclusion for most of his life, and made unbelievable strides in researching the metagene, the genetic code that defines and produces us metahumans."
  branches {
    responseText: ""
    nextNodeIndex: 17
    idRef {
      id: "55f07f01643431a11997689b:55f08117643431a1199769b2"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f0811b643431a1199769b6"
  }
  index: 17
  text: "Vauclair merely wished to use the metagene as a means of infection, turning the masses into carriers to distribute his disease. Here at Shiawase Biotech, though, we realized that we could use this same technique to target the metagene itself."
  branches {
    responseText: ""
    nextNodeIndex: 18
    idRef {
      id: "55f07f01643431a11997689b:55f0811b643431a1199769b8"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f0811e643431a1199769ba"
  }
  index: 18
  text: "In a breakthrough, we isolated the so-called \342\200\234trog gene\342\200\235, the sequence that manifests in orks and trolls. By attaching a payload to this sequence, we were able to engineer a virus that could kill those specific metatypes while leaving all others unharmed."
  branches {
    responseText: "That\342\200\231s like using a bazooka to kill a fly."
    nextNodeIndex: 19
    idRef {
      id: "55f07f01643431a11997689b:55f0811e643431a1199769bc"
    }
  }
  branches {
    responseText: "That must violate every weapons treaty that exists."
    nextNodeIndex: 20
    idRef {
      id: "55f07f01643431a11997689b:55f08159643431a1199769c3"
    }
  }
  branches {
    responseText: "I\342\200\231m sure it was just coincidental that you went after those types."
    nextNodeIndex: 21
    idRef {
      id: "55f07f01643431a11997689b:55f0815e643431a1199769cc"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f08154643431a1199769bf"
  }
  index: 19
  text: "No: it\342\200\231s like using a bazooka to kill millions of flies."
  branches {
    responseText: ""
    nextNodeIndex: 22
    idRef {
      id: "55f07f01643431a11997689b:55f08157643431a1199769c1"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f08159643431a1199769c5"
  }
  index: 20
  text: "That\342\200\231s the great thing about megacorps: we don\342\200\231t sign treaties. Those are for nation-states, which, if you haven\342\200\231t noticed, aren\342\200\231t so hot these days."
  branches {
    responseText: ""
    nextNodeIndex: 22
    idRef {
      id: "55f07f01643431a11997689b:55f08159643431a1199769c7"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f0815e643431a1199769ce"
  }
  index: 21
  text: "I\342\200\231ll admit that, from a pure engineering perspective, the trog gene was easiest to identify. Given enough time, we could probably create similar forms for other types. But we need to choose our priorities wisely."
  branches {
    responseText: ""
    nextNodeIndex: 22
    idRef {
      id: "55f07f01643431a11997689b:55f0815e643431a1199769d0"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f08161643431a1199769d3"
  }
  index: 22
  text: "Orks are incredibly prolific. With each passing year, their share of the population grows higher. And they\342\200\231ve always been tougher and stronger than other metatypes; trolls even more so."
  branches {
    responseText: ""
    nextNodeIndex: 23
    idRef {
      id: "55f07f01643431a11997689b:55f0819d643431a1199769da"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f081a0643431a1199769dd"
  }
  index: 23
  text: "That has some people worried. If you believe in the onslaught - if you think a conflict between the metatypes is inevitable - then your top priority will be to level the playing field and ensure the population does not grow out of hand."
  branches {
    responseText: ""
    nextNodeIndex: 24
    idRef {
      id: "55f07f01643431a11997689b:55f081a2643431a1199769e3"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f081a2643431a1199769e5"
  }
  index: 24
  text: "Thanks to my lab, Shiawase Biotech is the sole manufacturer in the world who can offer this solution to our paying customers. They can spray it from the air, or distribute it through rations, or even deploy it during combat. "
  branches {
    responseText: ""
    nextNodeIndex: 25
    idRef {
      id: "55f07f01643431a11997689b:55f081a7643431a1199769e9"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f081a7643431a1199769eb"
  }
  index: 25
  text: "It\342\200\231s a tool for making dead orks, a very effective one. I believe that the model you tried out is the \342\200\234Monkshood\342\200\235 variety, which specializes in particularly painful and gruesome deaths. It\342\200\231s perfect for vacating an area of opposition: any trogs who aren\342\200\231t personally infected will be horrified by the carnage and will flee. Guaranteed."
  branches {
    responseText: ""
    nextNodeIndex: 14
    idRef {
      id: "55f07f01643431a11997689b:55f081f6643431a1199769ed"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f082e4643431a119976b3c"
  }
  index: 26
  text: "Ah. Our research is done out of Lawrence Berkeley, but for actual manufacturing, we need a more secure facility. That means a San Francisco facility."
  branches {
    responseText: ""
    nextNodeIndex: 27
    idRef {
      id: "55f07f01643431a11997689b:55f082e6643431a119976b3e"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f082e6643431a119976b40"
  }
  index: 27
  text: "We worked out an agreement with Kroin\342\200\231s people. We would help them solve their trog problem, and return they would provide us with detailed notes on the virus\342\200\231s effectiveness. They were going to pick it up in Walnut Creek and begin deployment in Halferville this weekend."
  branches {
    responseText: ""
    nextNodeIndex: 28
    idRef {
      id: "55f07f01643431a11997689b:55f0830a643431a119976b46"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f08313643431a119976b49"
  }
  index: 28
  text: "Except, you gave that delivery a short-cut. From what I understand, it\342\200\231s been a rousing success. "
  branches {
    responseText: "There must be some way to reverse the infection."
    nextNodeIndex: 29
    idRef {
      id: "55f07f01643431a11997689b:55f0831e643431a119976b4b"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "Please, one of my friends is dying. Tell me how to save them."
    nextNodeIndex: 29
    idRef {
      id: "55f07f01643431a11997689b:55f0831e643431a119976b4d"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "I will make you suffer painfully unless you share a cure."
    nextNodeIndex: 29
    idRef {
      id: "55f07f01643431a11997689b:55f0831e643431a119976b4f"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f08334643431a119976b52"
  }
  index: 29
  text: "As in, an antidote? I honestly don\342\200\231t know."
  branches {
    responseText: "I don\342\200\231t believe you."
    nextNodeIndex: 30
    idRef {
      id: "55f07f01643431a11997689b:55f08345643431a119976bca"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "There has to be one."
    nextNodeIndex: 30
    idRef {
      id: "55f07f01643431a11997689b:55f08345643431a119976bcc"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "Time to break out the thumbscrews."
    nextNodeIndex: 30
    idRef {
      id: "55f07f01643431a11997689b:55f08345643431a119976bce"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f08359643431a119976bd1"
  }
  index: 30
  text: "I\342\200\231m serious! You have to understand, the last three years of my life has been completely focused on developing this bioweapon.\n\nThe whole *point* of it is to be uncurable. That\342\200\231s why we made it target the metagene in the first place."
  branches {
    responseText: ""
    nextNodeIndex: 31
    idRef {
      id: "55f07f01643431a11997689b:55f08368643431a119976c4f"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f08369643431a119976c51"
  }
  index: 31
  text: "That said\342\200\246 I run a large lab, with many independent researchers under me. I imagine one of them must have at least looked into a cure at some point. I can\342\200\231t promise anything, but you might be able to find something useful in Lawrence Berkeley."
  branches {
    responseText: ""
    nextNodeIndex: 14
    idRef {
      id: "55f07f01643431a11997689b:55f08369643431a119976c53"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Find a Cure in Berkeley"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "55f08214643431a119976a2b"
  }
  index: 32
  text: "Come on, think about it. Who hates orks and trolls more than anyone?"
  branches {
    responseText: "Colonel Saito."
    nextNodeIndex: 33
    onlyOnce: true
    idRef {
      id: "55f07f01643431a11997689b:55f08215643431a119976a2d"
    }
  }
  branches {
    responseText: "The Halferville Protection Front."
    nextNodeIndex: 38
    idRef {
      id: "55f07f01643431a11997689b:55f08238643431a119976a35"
    }
  }
  branches {
    responseText: "You."
    nextNodeIndex: 40
    idRef {
      id: "55f07f01643431a11997689b:55f08238643431a119976a37"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f08215643431a119976a2f"
  }
  index: 33
  text: "That\342\200\231s right! Our champion and protector is also our top client."
  branches {
    responseText: ""
    nextNodeIndex: 34
    idRef {
      id: "55f07f01643431a11997689b:55f08235643431a119976a33"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f0825a643431a119976a44"
  }
  index: 34
  text: "Ever since the Shavarus incident, Saito has been preparing for a grand expansion. Despite his immense power, he feels hemmed in by the orks across the Bay, and lives in constant fear of a metahuman uprising to topple his regime."
  branches {
    responseText: ""
    nextNodeIndex: 35
    idRef {
      id: "55f07f01643431a11997689b:55f0828d643431a119976a55"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f08291643431a119976a5c"
  }
  index: 35
  text: "He has his crack Marine troops and\342\200\246 some other assistance, but the sheer number of orks in the East Bay gives him pause. Project Hemlock will be his salvation. "
  branches {
    responseText: ""
    nextNodeIndex: 36
    idRef {
      id: "55f07f01643431a11997689b:55f08291643431a119976a5e"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f08291643431a119976a60"
  }
  index: 36
  text: "Once we start manufacturing at full scale, we\342\200\231ll produce enough to wipe trogs from the entire city, without anyone needing to fire a shot. With Oakland clear, nothing will stop Saito from taking Walnut Creek, the rest of the East Bay, and on into the Central Valley."
  branches {
    responseText: ""
    nextNodeIndex: 37
    idRef {
      id: "55f07f01643431a11997689b:55f08295643431a119976a64"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f07f01643431a11997689b:55f08295643431a119976a66"
  }
  index: 37
  text: "And what will stop him? There\342\200\231s no CalFree army. He can march all the way into Sacramento without any resistance.\n\nSo, as you can imagine, Project Hemlock is extremely valuable to him. With this one tool, he\342\200\231ll be able to claim the entire Free State."
  branches {
    responseText: ""
    nextNodeIndex: 14
    idRef {
      id: "55f07f01643431a11997689b:55f082be643431a119976a68"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f08244643431a119976a3a"
  }
  index: 38
  text: "The HPF are just pawns, easily manipulated thanks to their bigotry. They don\342\200\231t have anywhere near the level of resources necessary to fund a project like this."
  branches {
    responseText: ""
    nextNodeIndex: 39
    idRef {
      id: "55f07f01643431a11997689b:55f0824c643431a119976a3c"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f0824e643431a119976a3f"
  }
  index: 39
  text: "No. The man you\342\200\231re looking for is Colonel Saito, our champion, protector, and also our top client."
  branches {
    responseText: ""
    nextNodeIndex: 34
    idRef {
      id: "55f07f01643431a11997689b:55f08251643431a119976a41"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f08265643431a119976a4a"
  }
  index: 40
  text: "Ha! I could care less about orks and trolls, or elves for that matter.\n\nThis is just a scientific puzzle for me to solve, and a profitable one at that. If I could make more nuyen manufacturing an anti-elf gene, I would."
  branches {
    responseText: ""
    nextNodeIndex: 39
    idRef {
      id: "55f07f01643431a11997689b:55f08268643431a119976a4c"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f083b0643431a119976cef"
  }
  index: 41
  text: "All right, I\342\200\231ve answered your questions. You have all that I can give you. What will you do with me now?"
  branches {
    responseText: "I need to take you into custody until\342\200\246"
    nextNodeIndex: 42
    idRef {
      id: "55f07f01643431a11997689b:55f083ba643431a119976cf1"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "I\342\200\231ll let you go for now, but you\342\200\231d better\342\200\246"
    nextNodeIndex: 42
    idRef {
      id: "55f07f01643431a11997689b:55f083ba643431a119976cf3"
    }
    auxiliaryLink: true
  }
  branches {
    responseText: "I\342\200\231m going to teach you a lesson about\342\200\246"
    nextNodeIndex: 42
    idRef {
      id: "55f07f01643431a11997689b:55f083ba643431a119976cf5"
    }
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "55f083cc643431a119976cf8"
  }
  index: 42
  text: "A loud alarm sounds, coming from outside the manor. In the instant that your attention is diverted, Ava twists a ring on her finger and disappears from sight."
  branches {
    responseText: ""
    nextNodeIndex: 43
    idRef {
      id: "55f07f01643431a11997689b:55f08f4c643431a119976e03"
    }
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "5611c306346435ec1a006a1d"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  comment: "TODO: Alarm sound, change lights, remove Ava"
}
nodes {
  idRef {
    id: "55f08f4f643431a119976e06"
  }
  index: 43
  text: "{{GM}}Her voice taunts you from over the intercom system.{{/GM}}\n\nI\342\200\231m glad I could keep you talking for so long. I believe you know my friends in Lonestar. Au revoir, $(l.name). Try not to leave a mess before you expire."
  nodeType: ConversationNodeType_Simple
  comment: "TODO: Kick off the final fight."
}
roots {
  nextNodeIndex: 0
  idRef {
    id: "55f07f01643431a11997689b:55f07f01643431a11997689f"
  }
}
