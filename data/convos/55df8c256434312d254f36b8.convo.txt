idRef {
  id: "55df8c256434312d254f36b8"
}
ui_name: "cc_a2_sable_s1-Corpse"
nodes {
  idRef {
    id: "55df8c2a6434312d254f36c0"
  }
  index: 0
  text: "The body is starting to grow rank."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "55df8c256434312d254f36b8:55df8c366434312d254f36c2"
    }
  }
  nodeType: ConversationNodeType_GM_Voice
  actions {
    ops {
      functionName: "Enable/Disable Trigger"
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "EnableOrDisable"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "55ec7d563464352c0e000a23"
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "55df8c386434312d254f36c5"
  }
  index: 1
  text: ""
  branches {
    responseText: "{{GM}}Examine the cause of death.{{/GM}}"
    nextNodeIndex: 2
    onlyOnce: true
    idRef {
      id: "55df8c256434312d254f36b8:55df8c416434312d254f36c7"
    }
  }
  branches {
    responseText: "{{CC}}Etiquette: Gang{{/CC}} {{GM}}Consider the message sent by the wounds.{{/GM}}"
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 15
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
    }
    nextNodeIndex: 3
    onlyOnce: true
    idRef {
      id: "55df8c256434312d254f36b8:55df8c426434312d254f36c9"
    }
  }
  branches {
    responseText: "{{CC}}Biotech: 3{{/CC}} {{GM}}Closely examine the wound.{{/GM}}"
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 11
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 3
        }
      }
    }
    nextNodeIndex: 5
    onlyOnce: true
    idRef {
      id: "55df8c256434312d254f36b8:55df8c426434312d254f36cb"
    }
  }
  branches {
    responseText: "{{CC}}Ranged Combat: 4{{/CC}} {{GM}}Analyze the blood spatter pattern.{{/GM}}"
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 4
        }
      }
    }
    nextNodeIndex: 6
    onlyOnce: true
    idRef {
      id: "55df8c256434312d254f36b8:55df8c426434312d254f36cd"
    }
  }
  branches {
    responseText: "What do you make of this, Rafik?"
    conditions {
      ops {
        functionName: "Evaluate Tag for Actor"
        args {
          call_value {
            functionName: "All Actors Within Area"
            args {
              call_value {
                functionName: "Area: Region"
                args {
                  call_value {
                    functionName: "Get Map Item (Region)"
                    args {
                      string_value: "554c46363464351421004513"
                    }
                  }
                }
              }
            }
            args {
              call_value {
                functionName: "Get Preset Value (int)"
                args {
                  string_value: "AllOrAny"
                }
                args {
                  int_value: 1
                }
              }
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (SenseTagList)"
            args {
              string_value: "isRafik"
            }
          }
        }
      }
    }
    nextNodeIndex: 7
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "55df8c256434312d254f36b8:55ec74a83464352c0e0007ad"
    }
  }
  branches {
    responseText: "Leave."
    nextNodeIndex: -1
    idRef {
      id: "55df8c256434312d254f36b8:55df8c426434312d254f36cf"
    }
  }
  nodeType: ConversationNodeType_Simple
  comment: "Root node"
}
nodes {
  idRef {
    id: "55df8c546434312d254f36d2"
  }
  index: 2
  text: "Oscar was shot. A lot. You count one wound in the thigh, one in the chest, and three in the head."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "55df8c256434312d254f36b8:55df8c566434312d254f36d4"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "55df8c7b6434312d254f36e8"
  }
  index: 3
  text: "This doesn\342\200\231t make sense. Gang killings fall into one of two categories: swift and quiet, or loud and bloody. The first is for efficiently removing obstacles without attracting attention, the second is to make a point to rivals."
  branches {
    responseText: ""
    nextNodeIndex: 4
    idRef {
      id: "55df8c256434312d254f36b8:55df8c8f6434312d254f36ea"
    }
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "55df8c926434312d254f36ed"
  }
  index: 4
  text: "In contrast, this killing more closely resembles that which you might find on a battlefield. Whoever did this wanted to make certain that Oscar was dead, but did so with an almost clinical precision."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "55df8c256434312d254f36b8:55df8c9b6434312d254f36ef"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "55df8cbd6434312d254f370d"
  }
  index: 5
  text: "It\342\200\231s difficult to determine the order of shots, but you suspect that Oscar was first shot in the leg, rendering him immobile. He was then shot in the chest, knocking him into the ground. The final three shots in the head would have ensured that he was certainly, absolutely dead."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "55df8c256434312d254f36b8:55df8cd16434312d254f370f"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "55df8d066434312d254f3714"
  }
  index: 6
  text: "All of the shots seem to have been fired from the same weapon. Likely a revolver. If you had to guess, you\342\200\231d say it was a Ruger Super Warhawk.\n\nWarhawks aren\'t common guns in the Gauntlet; it\342\200\231s the sort of weapon you\342\200\231re more likely to find carried by mercenaries and other ex-military types."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "55df8c256434312d254f36b8:55df8d2d6434312d254f3716"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_GM_Voice
}
nodes {
  idRef {
    id: "55ec74b23464352c0e0007b0"
  }
  index: 7
  text: "{{GM}}He frowns in concentration.{{/GM}}\n\nWe\'ve seen plenty of deaths out on the streets. This one seems different, somehow. It doesn\'t look like the handiwork of the gangs we\'ve run into around here.\n\nSome new players might be moving in. Or maybe just some new recruits. We should ask the locals if they\'ve seen anything unusual lately."
  branches {
    responseText: ""
    nextNodeIndex: 1
    idRef {
      id: "55df8c256434312d254f36b8:55ec75593464352c0e0007b2"
    }
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  speaker_override_id: "55e13144346435e0140016a8"
}
roots {
  nextNodeIndex: 0
  idRef {
    id: "55df8c256434312d254f36b8:55df8c256434312d254f36bc"
  }
}
