triggers {
  name: "Debug"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Set Prop Visible"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "555bf49f34643520190008e3"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Set Prop Visible"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "555bf50034643520190008e5"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "DoesOrDoesNot"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: false
  idRef {
    id: "555bf49334643520190008e1"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Transition Hall to Dis"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55216fd0346435e810004d78"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 1
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.25
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "Berlin:props"
          }
          args {
            string_value: "ElevatorDown"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 4
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55386906346435700f004df8"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 1
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Cycle Dis Lights"
          }
        }
      }
      args {
        float_value: 1
      }
    }
    ops {
      functionName: "Trigger: Run Alternate Trigger"
      args {
        call_value {
          functionName: "Get Map Item (Trigger)"
          args {
            string_value: "5561621b346435d81b006030"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WaitOrNot"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "55634329346435c816004805"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55386b00346435700f004e01"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Transition Dis to Hall"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55386906346435700f004df8"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 1
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.25
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Change Actor Team"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Actor)"
              args {
                string_value: "55634329346435c816004805"
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (string)"
          args {
            string_value: "FactionList"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (SceneDimension)"
          args {
            string_value: "Default"
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "Berlin:props"
          }
          args {
            string_value: "ElevatorDown"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 4
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55216fd0346435e810004d78"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 1
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "55386bd8346435700f004e02"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Transition Hall to Ghetto"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5521af8d346435e810005481"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 1
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.25
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "LadderClimb"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 2
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "553868da346435700f004df4"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 1
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "55386da3346435700f004e05"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Transition Ghetto to Hall"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "553868da346435700f004df4"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 1
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.25
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "LadderClimb"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 2
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55386ec8346435700f004e08"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 1
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "55386da3346435700f004e06"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Exit Apartment"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5538691c346435700f004dfa"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "DoorSlide"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.7
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55216d00346435e810004d0c"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "553bc7e0346435380f001e91"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Enter Apartment"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55216d00346435e810004d0c"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "DoorSlide"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.7
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5538691c346435700f004dfa"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "553bc7e0346435380f001e92"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Exit Office"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5538692d346435700f004dfc"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "DoorSlide"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.7
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55216f44346435e810004d66"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "554e4aa53464351421004526"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Enter Office"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55216f44346435e810004d66"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "DoorSlide"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.7
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5538692d346435700f004dfc"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 7
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "554e4aa53464351421004527"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Exit Clinic"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "5538695a346435700f004e00"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "DoorSlide"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.7
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55217507346435e810004df3"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "554e4aa93464351421004528"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Enter Clinic"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55217507346435e810004df3"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "DoorSlide"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.7
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "5538695a346435700f004e00"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "554e4aa93464351421004529"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Exit Hovel"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55386946346435700f004dfe"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "DoorSlide"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.7
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55217cf3346435e810004e54"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "554e4aaf346435142100452a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Enter Hovel"
  events {
    ops {
      functionName: "On Item Interaction"
      args {
        call_value {
          functionName: "Get Map Item (InteractableObject)"
          args {
            string_value: "55217cf3346435e810004e54"
          }
        }
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Fade Camera Out"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
    ops {
      functionName: "Play Sound"
      args {
        call_value {
          functionName: "Get Map Item (Sound)"
          args {
            string_value: "props"
          }
          args {
            string_value: "DoorSlide"
          }
        }
      }
      args {
        float_value: 1
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "bool"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
      args {
        float_value: 0.7
      }
    }
    ops {
      functionName: "Trigger: Wait for Event"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Transition"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "All Actors on Team"
          args {
            call_value {
              functionName: "Get Preset Value (string)"
              args {
                string_value: "FactionList"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "AllOrAny"
              }
              args {
                int_value: 0
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (SceneDimension)"
              args {
                string_value: "Default"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Current Location of Prop"
          args {
            call_value {
              functionName: "Get Map Item (Prop)"
              args {
                string_value: "55386946346435700f004dfe"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Teleport Camera To Actor"
      args {
        call_value {
          functionName: "Triggering Actor"
        }
      }
    }
    ops {
      functionName: "Fade Camera In"
      args {
        float_value: 0.5
      }
      args {
        float_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "554e4aaf346435142100452b"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Directional Light Cycles"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Cycle Dis Lights"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Set Directional Light Color"
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0.1
          }
          args {
            float_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0.1
          }
          args {
            float_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0.1
          }
          args {
            float_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0.75
          }
          args {
            float_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0
          }
          args {
            float_value: -1
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0
          }
          args {
            float_value: -1
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 0
          }
          args {
            float_value: -1
          }
        }
      }
      args {
        float_value: 0
      }
      args {
        call_value {
          functionName: "Get Map Item (CameraRegion)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Cycle Dis Lights"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 2
          }
          args {
            float_value: 5
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "554e503e3464351421004545"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Move Light to A"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Move Light A"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561600e346435d81b00602b"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "556340bb346435c816004804"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "LightSpeed"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Move Light B"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (float)"
          args {
            float_value: 13
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 3
              }
            }
          }
          args {
            call_value {
              functionName: "Get Variable (float)"
              args {
                string_value: "LightSpeed"
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "555ff0ff346435cc1e0059d8"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Move Light to B"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Move Light B"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561600e346435d81b00602b"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "556340bb346435c816004801"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "LightSpeed"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Move Light C"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (float)"
          args {
            float_value: 14
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 3
              }
            }
          }
          args {
            call_value {
              functionName: "Get Variable (float)"
              args {
                string_value: "LightSpeed"
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5561608d346435d81b00602d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Move Light to C"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Move Light C"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561600e346435d81b00602b"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "556340bb346435c8160047ff"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "LightSpeed"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Move Light A"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (float)"
          args {
            float_value: 9
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 3
              }
            }
          }
          args {
            call_value {
              functionName: "Get Variable (float)"
              args {
                string_value: "LightSpeed"
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55616181346435d81b00602f"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Init Dis Moving Lights"
  events {
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561600e346435d81b00602b"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "556340bb346435c8160047ff"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Move Prop"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561676f346435d81b00603e"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "556340bb346435c816004803"
              }
            }
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Move Light A"
          }
        }
      }
      args {
        float_value: 1
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Move Light L"
          }
        }
      }
      args {
        float_value: 1
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Flip Light 1 Off"
          }
        }
      }
      args {
        float_value: 1
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Flip Light 2 Off"
          }
        }
      }
      args {
        float_value: 1
      }
    }
  }
  isActive: true
  idRef {
    id: "5561621b346435d81b006030"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Move Light to L"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Move Light L"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561676f346435d81b00603e"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "556340bb346435c816004800"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "LightSpeed"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Move Light M"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (float)"
          args {
            float_value: 10
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 3
              }
            }
          }
          args {
            call_value {
              functionName: "Get Variable (float)"
              args {
                string_value: "LightSpeed"
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "556164c0346435d81b006036"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Move Light to M"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Move Light M"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561676f346435d81b00603e"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "556340bb346435c8160047fe"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "LightSpeed"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Move Light N"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (float)"
          args {
            float_value: 14
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 3
              }
            }
          }
          args {
            call_value {
              functionName: "Get Variable (float)"
              args {
                string_value: "LightSpeed"
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55616520346435d81b006038"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Move Light to N"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Move Light N"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561676f346435d81b00603e"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "556340bb346435c816004802"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "LightSpeed"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Move Light O"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (float)"
          args {
            float_value: 9
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 3
              }
            }
          }
          args {
            call_value {
              functionName: "Get Variable (float)"
              args {
                string_value: "LightSpeed"
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55616522346435d81b006039"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Move Light to O"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Move Light O"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Move Prop with Speed"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561676f346435d81b00603e"
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "556340bb346435c816004803"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Variable (float)"
          args {
            string_value: "LightSpeed"
          }
        }
      }
    }
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Move Light L"
          }
        }
      }
      args {
        call_value {
          functionName: "Arithmetic (float)"
          args {
            float_value: 7
          }
          args {
            call_value {
              functionName: "Get Preset Value (int)"
              args {
                string_value: "Arithmetic Ops"
              }
              args {
                int_value: 3
              }
            }
          }
          args {
            call_value {
              functionName: "Get Variable (float)"
              args {
                string_value: "LightSpeed"
              }
            }
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55616523346435d81b00603a"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Flip Light 1 Off"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Flip Light 1 Off"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Flip Light 1 On"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 1
          }
          args {
            float_value: 3
          }
        }
      }
    }
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561600e346435d81b00602b"
          }
        }
      }
      args {
        string_value: "cubic:1:00000000"
      }
    }
  }
  isActive: true
  idRef {
    id: "55616a13346435d81b00603f"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Flip Light 1 On"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Flip Light 1 On"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Flip Light 1 Off"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 1
          }
          args {
            float_value: 4
          }
        }
      }
    }
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561600e346435d81b00602b"
          }
        }
      }
      args {
        string_value: "cubic:1:FFFFFFFF"
      }
    }
  }
  isActive: true
  idRef {
    id: "55616a60346435d81b006040"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Flip Light 2 Off"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Flip Light 2 Off"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Flip Light 2 On"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 1
          }
          args {
            float_value: 2
          }
        }
      }
    }
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561676f346435d81b00603e"
          }
        }
      }
      args {
        string_value: "cubic:1:00000000"
      }
    }
  }
  isActive: true
  idRef {
    id: "55616d7e346435d81b006041"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Flip Light 2 On"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Flip Light 2 On"
      }
    }
  }
  conditions {
    ops {
      functionName: "Evaluate If Actor is Inside Region"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "AreOrAreNot"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Region)"
          args {
            string_value: "554d7915346435142100451f"
          }
        }
      }
    }
  }
  actions {
    ops {
      functionName: "Send Event After Delay"
      args {
        call_value {
          functionName: "Get Map Item (Event)"
          args {
            string_value: "Flip Light 2 Off"
          }
        }
      }
      args {
        call_value {
          functionName: "Random (float)"
          args {
            float_value: 1
          }
          args {
            float_value: 5
          }
        }
      }
    }
    ops {
      functionName: "Light Transition"
      args {
        call_value {
          functionName: "Get Map Item (Prop)"
          args {
            string_value: "5561676f346435d81b00603e"
          }
        }
      }
      args {
        string_value: "cubic:1:FFFFFFFF"
      }
    }
  }
  isActive: true
  idRef {
    id: "55616d7e346435d81b006042"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "INIT GLOBAL TAGS - PC0"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add Tag to Actor"
      args {
        call_value {
          functionName: "Tag From String"
          args {
            string_value: "isPC0"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "556d24173464358014009eac"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Pending Goal Recruit Dorbi"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_Recruit_Dorbi"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Recruit a Pyro"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "557347c0346435d417002077"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Completed Goal Recruit Dorbi"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_Recruit_Dorbi"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Recruit a Pyro"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "55734809346435d417002078"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Pending Goal Recruit Sable"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_Recruit_Sable"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Recruit a Decker"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5573481c346435d417002079"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Completed Goal Recruit Sable"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_Recruit_Sable"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Recruit a Decker"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5573481c346435d41700207a"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Pending Goal Recruit Persi"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_Recruit_Persi"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Recruit a Rigger"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5573481d346435d41700207b"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Completed Goal Recruit Persi"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_Recruit_Persi"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 4
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Recruit a Rigger"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5573481d346435d41700207c"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Pending Goal Retrieve Security"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 3
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_RetrieveSecurity"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Retrieve train security protocols from Shiawase"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5574e3e9346435900e007acb"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Completed Goal Retrieve Security"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 3
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_RetrieveSecurity"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Retrieve train security protocols from Shiawase"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5574e3e9346435900e007acc"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Pending Goal Prepare Earthquake"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 3
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_PrepareEarthquake"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Prepare an earthquake"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5574e48c346435900e007acd"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Completed Goal Prepare Earthquake"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 3
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_PrepareEarthquake"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Prepare an earthquake"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5574e48c346435900e007ace"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Pending Goal Acquire Engine"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 3
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_AcquireEngine"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Acquire a train engine"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5574e48d346435900e007acf"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Completed Goal Acquire Engine"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 3
      }
    }
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_MissionState_AcquireEngine"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  actions {
    ops {
      functionName: "Set Goal Status"
      args {
        call_value {
          functionName: "Get Map Item (Goal)"
          args {
            string_value: "Acquire a train engine"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "GoalStatus"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5574e48d346435900e007ad0"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Rafik Disapproves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Rafik Disapproves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Rafik"
          }
        }
      }
      args {
        int_value: -1
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isRafik"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
          }
          args {
            string_value: "String_LostFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556b73b53464352813006457"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Rafik Approves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Rafik Approves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Rafik"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isRafik"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "String_GainedFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556b73f33464352813006493"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Persi Disapproves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Persi Disapproves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Persi"
          }
        }
      }
      args {
        int_value: -1
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isPersi"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
          }
          args {
            string_value: "String_LostFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556b7f003464352813007092"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Persi Approves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Persi Approves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Persi"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isPersi"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "String_GainedFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556b7f003464352813007093"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Persi Greatly Disapproves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Persi Greatly Disapproves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Persi"
          }
        }
      }
      args {
        int_value: -3
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isPersi"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "String_LostMuchFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Apply Camera Shake"
      args {
        float_value: 0.25
      }
      args {
        float_value: 0.5
      }
    }
  }
  isActive: true
  idRef {
    id: "556d196a346435801400719d"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Sable Disapproves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Sable Disapproves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Sable"
          }
        }
      }
      args {
        int_value: -1
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isSable"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
          }
          args {
            string_value: "String_LostFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556d3375346435801400bdc2"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Sable Approves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Sable Approves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Sable"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isSable"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "String_GainedFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556d3375346435801400bdc3"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Sable Greatly Disapproves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Sable Greatly Disapproves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Sable"
          }
        }
      }
      args {
        int_value: -3
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isSable"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "String_LostMuchFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Apply Camera Shake"
      args {
        float_value: 0.25
      }
      args {
        float_value: 0.5
      }
    }
  }
  isActive: true
  idRef {
    id: "556d3375346435801400bdc4"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Dorbi Disapproves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Dorbi Disapproves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Dorbi"
          }
        }
      }
      args {
        int_value: -1
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isDorbi"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
          }
          args {
            string_value: "String_LostFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556e6adf346435e014006513"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Dorbi Approves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Dorbi Approves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Dorbi"
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isDorbi"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "String_GainedFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 1
          }
        }
      }
      args {
        int_value: 0
      }
    }
  }
  isActive: true
  idRef {
    id: "556e6adf346435e014006514"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Dorbi Greatly Disapproves"
  events {
    ops {
      functionName: "Get Map Item (Event)"
      args {
        string_value: "Dorbi Greatly Disapproves"
      }
    }
  }
  conditions {
  }
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_Approval_Dorbi"
          }
        }
      }
      args {
        int_value: -3
      }
    }
    ops {
      functionName: "Apply Attribute Status Effect to Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isDorbi"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Active Actor"
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 0
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "ActorAttributes"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        call_value {
          functionName: "Get Story Variable (string)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "String_LostMuchFavor"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "BuffDebuffType"
          }
          args {
            int_value: 2
          }
        }
      }
      args {
        int_value: 0
      }
    }
    ops {
      functionName: "Apply Camera Shake"
      args {
        float_value: 0.25
      }
      args {
        float_value: 0.5
      }
    }
  }
  isActive: true
  idRef {
    id: "556e6adf346435e014006515"
  }
  elseActions {
  }
  is_oneshot: false
}
triggers {
  name: "Set Stage for Council"
  events {
    ops {
      functionName: "On Map Start"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isPersi"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5574ec4a346435900e00903c"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isPersi"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Berlin:General/standing_idle_leaning"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isKora"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5574eca2346435900e00903d"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isKora"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Berlin:General/standing_idle_sitting"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isSable"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5574ece2346435900e00903e"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 7
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isSable"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_flirty"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isRafik"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5574ed4e346435900e00903f"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 5
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isRafik"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_bouncer"
          }
        }
      }
    }
    ops {
      functionName: "Teleport Actor"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Nearest Tagged Actor to Actor"
              args {
                call_value {
                  functionName: "Get Map Item (SenseTagList)"
                  args {
                    string_value: "isDorbi"
                  }
                }
              }
              args {
                call_value {
                  functionName: "Get Map Item (Player)"
                  args {
                    int_value: 0
                  }
                }
              }
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Center of Region"
          args {
            call_value {
              functionName: "Get Map Item (Region)"
              args {
                string_value: "5574eda4346435900e009040"
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "FacingDirection"
          }
          args {
            int_value: 3
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "TeleportMethod"
          }
          args {
            int_value: 0
          }
        }
      }
    }
    ops {
      functionName: "Play Animation From Manifest"
      args {
        call_value {
          functionName: "Nearest Tagged Actor to Actor"
          args {
            call_value {
              functionName: "Get Map Item (SenseTagList)"
              args {
                string_value: "isDorbi"
              }
            }
          }
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Animation)"
          args {
            string_value: "Seattle:General/standing_idle_preen"
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5574ec2b346435900e00903b"
  }
  elseActions {
  }
  is_oneshot: true
}
triggers {
  name: "Start Council 2"
  events {
    ops {
      functionName: "On Curtains Up"
    }
  }
  conditions {
    ops {
      functionName: "Comparison (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "5505a99b346435a418004d07"
          }
          args {
            string_value: "Global_numMissionsCompleted"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "Comparison Ops"
          }
          args {
            int_value: 0
          }
        }
      }
      args {
        int_value: 3
      }
    }
  }
  actions {
    ops {
      functionName: "End Current Team Round"
    }
    ops {
      functionName: "Start Conversation"
      args {
        call_value {
          functionName: "Get Map Item (Conversation)"
          args {
            string_value: "55749709346435900e0060c1"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Map Item (Actor)"
          args {
            string_value: "5574e559346435900e007ad2"
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 0
          }
        }
      }
    }
  }
  isActive: true
  idRef {
    id: "5574e52f346435900e007ad1"
  }
  elseActions {
  }
  is_oneshot: true
}
regions {
  name: "Camera Clinic"
  position {
    x: -177
    y: -19
    width: 16
    height: 28
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "554d78b5346435142100451a"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.9
    y: -0.7
    z: -0.5
  }
  directional_light_color {
    r: 0.54901963
    g: 0.58823532
    b: 0.42352942
    a: 1
  }
  ambient_light_color {
    r: 0.19607843
    g: 0.13725491
    b: 0.19607843
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Camera Hovel"
  position {
    x: -188
    y: 28
    width: 26
    height: 17
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "554d78c9346435142100451b"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.37254903
    g: 0.52156866
    b: 0.51372552
    a: 1
  }
  ambient_light_color {
    r: 0.37254903
    g: 0.25882354
    b: 0.48627451
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Camera Dorbi Office"
  position {
    x: -78
    y: -21
    width: 10
    height: 11
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "554d78e1346435142100451c"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.0627451
    g: 0.019607844
    b: 0.38431373
    a: 1
  }
  ambient_light_color {
    r: 0.54509807
    g: 0.48235294
    b: 0.47058824
    a: 0.88235295
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Camera Your Lodgings"
  position {
    x: -12
    y: -12
    width: 22
    height: 20
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "554d78f3346435142100451d"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.88235295
    g: 0.66274512
    b: 0.48235294
    a: 1
  }
  ambient_light_color {
    r: 0.05882353
    g: 0.29803923
    b: 0.34509805
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Camera Dis"
  position {
    x: -56
    y: -41
    width: 29
    height: 27
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "554d7915346435142100451f"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.082352944
    g: 0.19607843
    b: 0.36470589
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Camera Ghetto"
  position {
    x: -144
    y: 19
    width: 48
    height: 22
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "554d79293464351421004520"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.41176471
    g: 0.078431375
    b: 0.6156863
    a: 0.4509804
  }
  ambient_light_color {
    r: 0.13333334
    g: 0.45490196
    b: 0.45490196
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Camera Great Hall"
  position {
    x: -75
    y: -5
    width: 60
    height: 47
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "554d794a3464351421004521"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.78039217
    g: 0.36078432
    b: 0.22352941
    a: 1
  }
  ambient_light_color {
    r: 0.21176471
    g: 0.1882353
    b: 0.29019609
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Light Region M"
  position {
    x: -42
    y: -22
    width: -1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "556340bb346435c8160047fe"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Light Region C"
  position {
    x: -40
    y: -26
    width: 1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "556340bb346435c8160047ff"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Light Region L"
  position {
    x: -42
    y: -36
    width: -1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "556340bb346435c816004800"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Light Region B"
  position {
    x: -49
    y: -22
    width: 1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "556340bb346435c816004801"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Light Region N"
  position {
    x: -51
    y: -23
    width: -1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "556340bb346435c816004802"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Light Region O"
  position {
    x: -51
    y: -30
    width: -1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "556340bb346435c816004803"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Light Region A"
  position {
    x: -48
    y: -36
    width: -1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "556340bb346435c816004804"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Staging Camera"
  position {
    x: -17
    y: -27
    width: 7
    height: 9
  }
  enabledAtStart: true
  is_camera_region: true
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "5574ebc3346435900e009012"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Persi Mark Council"
  position {
    x: 3
    y: 1
    width: 1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "5574ec4a346435900e00903c"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Kora Mark"
  position {
    x: 3
    y: -2
    width: 1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "5574eca2346435900e00903d"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Sable Mark Council"
  position {
    x: 4
    y: 4
    width: 1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "5574ece2346435900e00903e"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Rafik Mark Council"
  position {
    x: 2
    y: -1
    width: 1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "5574ed4e346435900e00903f"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
regions {
  name: "Dorbi Mark Council"
  position {
    x: 4
    y: -1
    width: 1
    height: 1
  }
  enabledAtStart: true
  is_camera_region: false
  is_matrix_node: false
  is_vfx_fill_region: false
  idRef {
    id: "5574eda4346435900e009040"
  }
  highlight_color {
    r: 0
    g: 0
    b: 0
    a: 1
  }
  visible_at_start: false
  is_closet: false
  is_teleporter_region: false
  directional_light_dir {
    x: -0.5
    y: -1
    z: -0.75
  }
  directional_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambient_light_color {
    r: 0.50196081
    g: 0.50196081
    b: 0.50196081
    a: 1
  }
  ambience_template: ""
  combat_music: ""
  default_music: ""
  loop_combat_music: true
  loop_default_music: false
  no_fow_in_region: false
  combat_intense_music: ""
  combat_wrapup_music: ""
  loop_combat_intense_music: true
  loop_combat_wrapup_music: true
  combat_intense_threshold: 5
  combat_wrapup_threshold: 2
  combat_fade_interval: 2
  combat_intro_stinger: ""
  combat_outro_stinger: ""
  vfx_fill_prefab_name: ""
}
patrolRoutes {
  name: "New Patrol Route"
  pathType: 0
  can_move_beyond_node: false
  is_rail: false
  rail_speed: 1
  rail_rotation_time: 4
  idRef {
    id: "554d7912346435142100451e"
  }
  rail_draw_segments: true
  rail_draw_nodes: true
}
characters {
  name: "system_spawner_playerSpawner"
  gridPoint {
    x: 5
    y: 0
    z: 1
  }
  orientation: ORIENTATION_N
  idRef {
    id: "5521752d346435e810004e07"
  }
  lod: 0
  character_instance {
    character_mod {
      archetypeName: "Player"
    }
    team_id: "Shadowrunners"
    char_name: "PC0"
    enabled_at_start: true
    pc_spawn_number: 0
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -36
    y: 0
    z: -31
  }
  orientation: ORIENTATION_S
  idRef {
    id: "55634329346435c816004805"
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "Camera"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeCautious
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Invisible Camera"
    pc_spawn_number: -1
    ai_ignores: false
    uninjurable: false
    portrait {
      filename: ""
    }
    karma: 2
    hide_floaties: true
    has_fist: true
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -15
    y: 0
    z: -22
  }
  orientation: ORIENTATION_S
  GeneralTags: "isPersi"
  displayName: "Persi Core"
  idRef {
    id: "5574b264346435900e006808"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    prerequisites {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Variable (int)"
            args {
              string_value: "numTalksPersi"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 4
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    conversationPoint {
      conversationID: "55654a75346435ac07005f91"
      turnToFace: true
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Core/HumanFemale"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "AdeptCombatvest"
    }
    team_id: "Civilians"
    char_name: "Persi"
    GeneralTags: "isPersi"
    enabled_at_start: true
    pc_spawn_number: -1
    portrait {
      filename: "pc_orkfemale_06"
    }
    portrait_code_override: "s5h6c6b0"
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -15
    y: 0
    z: -23
  }
  orientation: ORIENTATION_S
  GeneralTags: "isSable"
  displayName: "Sable Resurrection"
  idRef {
    id: "5574b264346435900e006809"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "556e3e2d6434311d1ca42094"
      turnToFace: true
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Gangers/TrollMaleGanger_Halloweener"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Sable"
    GeneralTags: "isSable"
    pc_spawn_number: -1
    portrait {
      filename: "pc_trollmale_03a_biker"
    }
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -14
    y: 0
    z: -23
  }
  orientation: ORIENTATION_S
  GeneralTags: "isDorbi"
  displayName: "Dorbi"
  idRef {
    id: "5574b264346435900e00680a"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    prerequisites {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Variable (int)"
            args {
              string_value: "numTalksDorbi"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 4
            }
          }
        }
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "5505a99b346435a418004d07"
            }
            args {
              string_value: "Const_ConvosPerHubVisit"
            }
          }
        }
      }
    }
    conversationPoint {
      conversationID: "556e03c96434311d1ca4158b"
      turnToFace: true
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Berlin:HavenCivilians/DwarfFemaleHavenKerchief_1"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Dorbi"
    GeneralTags: "isDorbi"
    pc_spawn_number: -1
    portrait {
      filename: "pc_dwarffemale_06"
    }
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -14
    y: 0
    z: -22
  }
  orientation: ORIENTATION_S
  GeneralTags: "isRafik"
  displayName: "Rafik"
  idRef {
    id: "5574b264346435900e00680b"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "556a2198346435ac07007f45"
      turnToFace: false
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Berlin:Gangers/OrkMaleBerlinGanger"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
        cyberware_affinity: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Guard - Protect"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    team_id: "Civilians"
    char_name: "Rafik"
    GeneralTags: "isRafik"
    pc_spawn_number: -1
    portrait {
      filename: "pc_orkmale_04_slick"
    }
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -15
    y: 0
    z: -24
  }
  orientation: ORIENTATION_S
  GeneralTags: "isKora"
  displayName: "Kora"
  idRef {
    id: "5574b31b346435900e006960"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "556a72ca3464352813005fc0"
      turnToFace: true
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Berlin:HavenCivilians/DwarfFemaleHavenKerchief_2"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "AdeptCombatvest"
    }
    team_id: "Civilians"
    char_name: "Kora"
    GeneralTags: "isKora"
    enabled_at_start: true
    pc_spawn_number: -1
    portrait {
      filename: "pc_dwarffemale_05c_sexy"
    }
    portrait_code_override: "s5h6c6b0"
    karma: 6
  }
}
characters {
  name: "chars_icon_playerIcon"
  gridPoint {
    x: -14
    y: 0
    z: -24
  }
  orientation: ORIENTATION_S
  GeneralTags: "isNobody"
  displayName: "Nobody"
  idRef {
    id: "5574e559346435900e007ad2"
  }
  interactionRoot {
    isEnabled: true
    interactionRadius: 1
    conversationPoint {
      conversationID: "556a72ca3464352813005fc0"
      turnToFace: true
    }
    interaction_info_text: ""
  }
  lod: 0
  character_instance {
    prefab_name: "Seattle:Objects/InvisibleActor"
    character_sheet_id: "BaseCivilian"
    character_mod {
      stats {
        body: 0
        quickness: 0
        strength: 0
        charisma: 0
        intelligence: 0
        willpower: 0
        essence: 0
        magic: 0
        hp: 0
        ap: 0
        armor: 0
        force: 0
        morale: 0
        discipline: 0
        awareness: 0
        perception: 0
        authority: 0
        protect_tether_range: 0
        move_speed: 0
        vision_peripheral_distance: 0
        vision_cone_distance: 0
        vision_cone_angle: 0
      }
      skills {
        ranged_combat: 0
        close_combat: 0
        throwing_weapons: 0
        spellcasting: 0
        decking: 0
        conjuring: 0
        spirit_summoning: 0
        drone_control: 0
        biotech: 0
        dodge: 0
        etiquette_corporate: 0
        etiquette_security: 0
        etiquette_gang: 0
        etiquette_socialite: 0
        chi_casting: 0
        etiquette_shadowrunner: 0
        etiquette_street: 0
        etiquette_academic: 0
      }
      specializations {
        pistol: 0
        rifle: 0
        shotgun: 0
        smg: 0
        edged: 0
        unarmed: 0
        spirit_control: 0
        esp_control: 0
        drone_combat: 0
      }
      archetypeName: "Non-Combatant"
      attitude: AttitudeAggressive
      vulnerabilities {
      }
    }
    equipment {
      prefab_name: "AdeptCombatvest"
    }
    team_id: "Civilians"
    char_name: " "
    GeneralTags: "isNobody"
    enabled_at_start: true
    pc_spawn_number: -1
    portrait {
      filename: ""
    }
    portrait_code_override: "s5h6c6b0"
    karma: 6
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "numTalksPersi"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "didGreetPersi"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "isMostlyARigger"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "isMostlySmart"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "isMostlyChi"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "isMostlyStrong"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "isMostlyRanged"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "isMostlyMagic"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "didGreetSable"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "numTalksSable"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "FlirtedPersiConvo1"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "FlirtedPersiConvo2"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "FlirtedPersiConvo3"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "FlirtedSableConvo1"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "FlirtedSableConvo2"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "FlirtedSableConvo3"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "didGreetDorbi"
    typeName: "bool"
  }
}
variables {
  int_value: 0
  variableref_value {
    scope: TsVariableScope_Scene
    name: "numTalksDorbi"
    typeName: "int"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "didKoraMentionSaito"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "didGreetA5Horatio"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "didGreetA5Orion"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "didGreetA5Tolar"
    typeName: "bool"
  }
}
variables {
  float_value: 4
  variableref_value {
    scope: TsVariableScope_Scene
    name: "LightSpeed"
    typeName: "float"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "convoCouncilDidDiscussRoute"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "convoCouncilDidDiscussSecurity"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "convoCouncilDidDiscussBore"
    typeName: "bool"
  }
}
variables {
  bool_value: false
  variableref_value {
    scope: TsVariableScope_Scene
    name: "convoCouncilDidDiscussQuake"
    typeName: "bool"
  }
}
mapEvents: "Transition"
mapEvents: "Cycle Dis Lights"
mapEvents: "Flip Light 1 On"
mapEvents: "Flip Light 2 On"
mapEvents: "Flip Light 1 Off"
mapEvents: "Flip Light 2 Off"
mapEvents: "Move Light A"
mapEvents: "Move Light B"
mapEvents: "Move Light C"
mapEvents: "Move Light L"
mapEvents: "Move Light M"
mapEvents: "Move Light N"
mapEvents: "Move Light O"
mapEvents: "Rafik Approves"
mapEvents: "Rafik Disapproves"
mapEvents: "Rafik Greatly Disapproves"
mapEvents: "Persi Approves"
mapEvents: "Persi Disapproves"
mapEvents: "Persi Greatly Disapproves"
mapEvents: "Sable Approves"
mapEvents: "Sable Disapproves"
mapEvents: "Sable Greatly Disapproves"
mapEvents: "Dorbi Approves"
mapEvents: "Dorbi Disapproves"
mapEvents: "Dorbi Greatly Disapproves"
senseTags: "isPC0"
goals {
  name: "Retrieve train security protocols from Shiawase"
  type: GoalType_Primary
  status: GoalStatus_Hidden
}
goals {
  name: "Acquire a train engine"
  type: GoalType_Primary
  status: GoalStatus_Hidden
}
goals {
  name: "Prepare an earthquake"
  type: GoalType_Primary
  status: GoalStatus_Hidden
}
goals {
  name: "Recruit a Decker"
  type: GoalType_Primary
  status: GoalStatus_Hidden
}
goals {
  name: "Recruit a Rigger"
  type: GoalType_Primary
  status: GoalStatus_Hidden
}
goals {
  name: "Recruit a Pyro"
  type: GoalType_Primary
  status: GoalStatus_Hidden
}
worldMapLocation {
  filename: ""
  location {
    x: 0
    y: 0
  }
}
mapName: "cc_hub_halferville"
parentStory: ""
scene_title: "Halferville"
scene_subtitle: "Little York"
scene_synopsis: ""
scene_image: ""
scene_continue_button_skip: false
scene_restore_runner_health: true
directional_light_dir {
  x: -0.5
  y: -1
  z: -0.75
}
directional_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
ambient_light_color {
  r: 0.50196081
  g: 0.50196081
  b: 0.50196081
}
allow_drawn_weapons: false
team_affiliations {
  team_name: "Shadowrunners"
  affiliation: 0
  affiliation: 1
  affiliation: 1
  affiliation: 0
}
team_affiliations {
  team_name: "Gangers"
  affiliation: 1
  affiliation: 0
  affiliation: 1
  affiliation: 0
}
team_affiliations {
  team_name: "LoneStar"
  affiliation: 1
  affiliation: 1
  affiliation: 0
  affiliation: 0
}
team_affiliations {
  team_name: "Civilians"
  affiliation: 0
  affiliation: 0
  affiliation: 0
  affiliation: 0
}
scene_dimensions {
  dimension_name: "Default"
}
character_roster {
}
show_hiring_screen_on_scene_load: false
scene_hiring_prerequisites {
  prereq_description: ""
  prereq_conditions {
  }
}
hiring_slot_count: 0
hiring_minimum_karma: 0
hiring_maximum_karma: 0
roster_overrides {
}
use_hiring_cost_warning: false
hiring_average_cost: 99999
override_hiring_average_cost: true
show_equip_screen_on_scene_load: false
is_persistant: false
is_persistant_has_value: false
can_move_outside_camera_regions: false
can_start_before_triggers: false
can_use_team_advancement: true
